package com.erebelo.springmongodbdemo.service.impl;

import com.erebelo.springmongodbdemo.domain.entity.ProfileEntity;
import com.erebelo.springmongodbdemo.domain.request.ProfileRequest;
import com.erebelo.springmongodbdemo.domain.response.ProfileResponse;
import com.erebelo.springmongodbdemo.exception.model.CommonException;
import com.erebelo.springmongodbdemo.mapper.ProfileMapper;
import com.erebelo.springmongodbdemo.repository.ProfileRepository;
import com.erebelo.springmongodbdemo.service.ProfileService;
import com.erebelo.springmongodbdemo.service.validation.FieldMessage;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_400_001;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_001;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_002;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_003;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_409_001;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_422_000;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_422_001;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_422_002;
import static com.erebelo.springmongodbdemo.service.validation.ProfileConstraintValidator.validateContactNumbers;
import static com.erebelo.springmongodbdemo.service.validation.ProfileConstraintValidator.validateDateOfBirth;
import static com.erebelo.springmongodbdemo.service.validation.ProfileConstraintValidator.validateSpouseProfile;
import static com.erebelo.springmongodbdemo.util.ByteHandlerUtil.byteArrayComparison;
import static com.erebelo.springmongodbdemo.util.ByteHandlerUtil.byteGenerator;
import static com.erebelo.springmongodbdemo.util.HashAlgorithmUtil.generateSHAHashObject;
import static java.util.Objects.isNull;

@Service
@RequiredArgsConstructor
public class ProfileServiceImpl implements ProfileService {

    private final ProfileMapper mapper;
    private final ProfileRepository repository;
    private final ObjectMapper objectMapper;

    private static final Logger LOGGER = LoggerFactory.getLogger(ProfileServiceImpl.class);

    private static final String CHECK_OBJ_LOGGER = "Checking whether profile object exists by userId: {}";
    private static final String RESPONSE_BODY_LOGGER = "Response body: {}";

    @Override
    public ProfileResponse getProfile(String userId) {
        LOGGER.info("Getting profile: {}", userId);
        var profile = repository.findByUserId(userId).orElseThrow(() ->
                new CommonException(COMMON_ERROR_404_001, userId));

        LOGGER.info(RESPONSE_BODY_LOGGER, profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public ProfileResponse insertProfile(String userId, ProfileRequest profileRequest) {
        LOGGER.info(CHECK_OBJ_LOGGER, userId);
        repository.findByUserId(userId).ifPresent(o -> {
            throw new CommonException(COMMON_ERROR_409_001);
        });

        var profile = new ProfileEntity();
        profile.setUserId(userId);
        profile.setProfile(mapper.requestToEntity(profileRequest));
        profile.setHashObject(generateSHAHashObject(profile.toString()));

        LOGGER.info("Inserting profile: {}", profile);
        profile = repository.insert(profile);

        LOGGER.info(RESPONSE_BODY_LOGGER, profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public ProfileResponse updateProfile(String userId, ProfileRequest profileRequest) {
        LOGGER.info(CHECK_OBJ_LOGGER, userId);
        var profile = repository.findByUserId(userId).orElseThrow(() ->
                new CommonException(COMMON_ERROR_404_002, userId));

        LOGGER.info("Generating byte arrays for profile objects");
        var profileBytes = byteGenerator(profile.getProfile());

        profile.setProfile(mapper.requestToEntity(profileRequest));
        profile.setHashObject(generateSHAHashObject(profile.toString()));

        var newProfileBytes = byteGenerator(profile.getProfile());

        LOGGER.info("Checking whether the generated byte arrays are equals");
        if (!byteArrayComparison(profileBytes, newProfileBytes)) {
            LOGGER.info("Updating profile: {}", profile);
            profile = repository.save(profile);
        } else {
            LOGGER.info("No updates found for profile object by put request");
        }

        LOGGER.info(RESPONSE_BODY_LOGGER, profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public ProfileResponse patchProfile(String userId, Map<String, Object> profileRequestMap) {
        LOGGER.info("Validating map request attributes");
        if (isNull(profileRequestMap) || profileRequestMap.isEmpty()) {
            throw new CommonException(COMMON_ERROR_400_001, Collections.singletonList("request body is mandatory and must contain some attribute"));
        }

        LOGGER.info("Fetching profile from database");
        var profile = repository.findByUserId(userId).orElseThrow(() ->
                new CommonException(COMMON_ERROR_404_002, userId));

        if (isNull(profile.getProfile())) {
            throw new CommonException(COMMON_ERROR_422_002);
        }

        int patchCounter;
        var dbProfileRequest = mapper.entityToRequest(profile.getProfile());
        try {
            LOGGER.info("Serializing/deserializing database profile object");
            var dbProfileRequestMap = objectMapper.readValue(objectMapper.writeValueAsString(dbProfileRequest), Map.class);

            LOGGER.info("Recursively merging profile request with database profile object");
            patchCounter = recursiveMapMerge(profileRequestMap, dbProfileRequestMap);

            LOGGER.info("Serializing/deserializing profile object after merging objects");
            dbProfileRequest = objectMapper.readValue(objectMapper.writeValueAsString(dbProfileRequestMap), ProfileRequest.class);
        } catch (Exception e) {
            throw new CommonException(COMMON_ERROR_422_001, e, e.getMessage());
        }

        if (patchCounter > 0) {
            LOGGER.info("Validating merged request attributes");
            validateRequestAttributes(dbProfileRequest);

            LOGGER.info("Updating {} field(s) by patch request", patchCounter);
            return this.updateProfile(userId, dbProfileRequest);
        } else {
            LOGGER.info("No updates found for profile object by patch request");
            LOGGER.info(RESPONSE_BODY_LOGGER, profile);
            return mapper.entityToResponse(profile.getProfile());
        }
    }

    @Override
    @Transactional
    public void deleteProfile(String userId) {
        LOGGER.info(CHECK_OBJ_LOGGER, userId);
        var profile = repository.findByUserId(userId).orElseThrow(() ->
                new CommonException(COMMON_ERROR_404_003, userId));

        LOGGER.info("Deleting profile: {}", profile);
        repository.delete(profile);
    }

    private int recursiveMapMerge(Map<String, Object> source, Map<String, Object> target) {
        int counter = 0;
        for (var entry : source.entrySet()) {
            var key = entry.getKey();
            var sourceValue = entry.getValue();
            var targetValue = target.get(key);

            if (targetValue instanceof Map && sourceValue instanceof Map && ((Map<?, ?>) sourceValue).size() > 0) {
                counter += recursiveMapMerge((Map<String, Object>) sourceValue, (Map<String, Object>) targetValue);
            } else if (!Objects.equals(sourceValue, targetValue)) {
                target.put(key, sourceValue);
                counter++;
            }
        }
        return counter;
    }

    private void validateRequestAttributes(ProfileRequest dbProfileRequest) {
        var errorMessages = new ArrayList<FieldMessage>();

        validateDateOfBirth(dbProfileRequest, errorMessages);
        validateContactNumbers(dbProfileRequest, errorMessages);
        validateSpouseProfile(dbProfileRequest, errorMessages);

        if (!errorMessages.isEmpty()) {
            var joiner = new StringJoiner(", ", "[", "]");

            for (FieldMessage field : errorMessages) {
                joiner.add(field.getMessage());
            }
            throw new CommonException(COMMON_ERROR_422_000, joiner.toString());
        }
    }
}
