package com.erebelo.springmongodbdemo.service.impl;

import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_001;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_002;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_404_003;
import static com.erebelo.springmongodbdemo.exception.model.CommonErrorCodesEnum.COMMON_ERROR_409_001;
import static com.erebelo.springmongodbdemo.util.HashAlgorithmUtil.generateSHAHashObject;

import com.erebelo.spring.common.utils.serialization.ByteHandler;
import com.erebelo.spring.common.utils.serialization.model.ByteWrapperObject;
import com.erebelo.springmongodbdemo.domain.entity.ProfileEntity;
import com.erebelo.springmongodbdemo.domain.request.ProfileRequest;
import com.erebelo.springmongodbdemo.domain.response.ProfileResponse;
import com.erebelo.springmongodbdemo.exception.model.CommonException;
import com.erebelo.springmongodbdemo.mapper.ProfileMapper;
import com.erebelo.springmongodbdemo.repository.ProfileRepository;
import com.erebelo.springmongodbdemo.service.ProfileService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Log4j2
@Service
@RequiredArgsConstructor
public class ProfileServiceImpl implements ProfileService {

    private final ProfileMapper mapper;
    private final ProfileRepository repository;

    private static final String CHECK_OBJ_LOGGER = "Checking whether profile object exists by userId: {}";

    @Override
    @Transactional(readOnly = true)
    public ProfileResponse getProfile(String userId) {
        log.info("Fetching profile with userId: {}", userId);
        ProfileEntity profile = repository.findByUserId(userId)
                .orElseThrow(() -> new CommonException(COMMON_ERROR_404_001, userId));

        log.info("Profile successfully retrieved: {}", profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public ProfileResponse insertProfile(String userId, ProfileRequest profileRequest) {
        log.info("Creating profile with userId: {}", userId);

        log.info(CHECK_OBJ_LOGGER, userId);
        repository.findByUserId(userId).ifPresent(o -> {
            throw new CommonException(COMMON_ERROR_409_001);
        });

        ProfileEntity profile = new ProfileEntity();
        profile.setUserId(userId);
        profile.setProfile(mapper.requestToEntity(profileRequest));
        profile.setHashObject(generateSHAHashObject(profile.toString()));

        log.info("Inserting profile");
        profile = repository.insert(profile);

        log.info("Profile created successfully: {}", profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public ProfileResponse updateProfile(String userId, ProfileRequest profileRequest) {
        log.info("Updating profile with userId: {}", userId);

        log.info(CHECK_OBJ_LOGGER, userId);
        ProfileEntity profile = repository.findByUserId(userId)
                .orElseThrow(() -> new CommonException(COMMON_ERROR_404_002, userId));

        log.info("Generating byte arrays for profile objects");
        ByteWrapperObject profileBytes = ByteHandler.byteGenerator(profile.getProfile());

        profile.setProfile(mapper.requestToEntity(profileRequest));
        profile.setHashObject(generateSHAHashObject(profile.toString()));

        ByteWrapperObject newProfileBytes = ByteHandler.byteGenerator(profile.getProfile());

        log.info("Checking whether the generated byte arrays are equals");
        if (!ByteHandler.byteArrayComparison(profileBytes, newProfileBytes)) {
            log.info("Updating profile");
            profile = repository.save(profile);
        } else {
            log.info("No updates found for profile object by put request");
        }

        log.info("Profile updated successfully: {}", profile);
        return mapper.entityToResponse(profile.getProfile());
    }

    @Override
    @Transactional
    public void deleteProfile(String userId) {
        log.info("Deleting profile with userId: {}", userId);

        log.info(CHECK_OBJ_LOGGER, userId);
        ProfileEntity profile = repository.findByUserId(userId)
                .orElseThrow(() -> new CommonException(COMMON_ERROR_404_003, userId));

        log.info("Profile deleted successfully");
        repository.delete(profile);
    }
}
